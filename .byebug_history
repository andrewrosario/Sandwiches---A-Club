cont
@sandwich = Sandwich.all.sample
@user = current_user
@user.sandwiches.sort_by{|sandwich| sandwich.average_rating}
user_sandwiches_by_rating
exit
path
cont
@comment.errors.full_messages
@comment.save
@comment
exit
User.destroy(@user)
@user
cont
comment.content = 'This comment has been deleted by the user.'
comment.content = 
comment.content
comment.replies.empty?
comment.replies
comment
exit
Ingredient.all
Ingredient.select{|s| s.type_of == "Bread"}
ingredients_by_category
params[:category]
params[:search][:name]
cont
params
cont
params
cont
params
exit
com
cont
com
c
exit
@sandwich.comments
comment
cont
params
cont
params
cont
params
cont
params
exit
xit
session[:user_id]
session[:user]
cont
session[:user]
cont
@sandwich.sandwich_photo.attached?
cont
@sandwich.sandwich_photo.attached?
cont
url_for(@ingredient.ingredient_photo)
@ingredient.ingredient_photo
cont
@photo = Photo.new(photo_params)
    end
        params.require(:photo).permit(:title, :image)
    def photo_params
@photo = Photo.new(params[:photo][:image])
photo_params
params[:photo][:image]
@photo = Photo.new(photo_params)
params
exit
params
exit
    end
        Sandwich.sort_by{|s| s.average_rating}
    def self.sort_by_rating
Sandwich.joins(:comments).group(:sandwich_id).count
Sandwich.joins(:comments).group(:sandwich_id)
Sandwich.joins(:comments)
array.reverse_each
array
cont
@comment = Comment.create(comment_params)
params
cont
params
@comment.errors.full_messages
@comment = Comment.create(comment_params)
cont
@comment.errors.full_messages
@comment = Comment.create(comment_params)
cont
params
cont
params
cont
flash[:error]
flash[:error] = sandwich.errors.full_messages[0]
sandwich.errors.full_messages[0]
flash[:error]
cont
sandwich.errors.full_messages
cont
sandwich.errors.full_messages
sandwich.errors
cont
sandwich
params
cont
params
User.all
Uer.all
sandwich.errors.full_messages
sanchwich.errors.full_messages
sandwich
cont
session
sandwich.errors.full_messages
sandwich.errors.full_messsage
sandwich.errors.full_messsages
sandwich = Sandwich.create(sandwich_params)
sandwich
cont
sandwich
cont
sandwich
cont
params
sandwich
sandwich_ingredient
ingredient
cont
sandwich_ingredient = SandwichIngredient.create(sandwich_id: sandwich.id, ingredient_id: thing.id, quantity: quantity)
thing = Ingredient.find_by(name: ing)
i = Ingredient.find_by(name: ing)
sandwich_ingredient = SandwichIngredient.create(sandwich_id: sandwich.id, ingredient_id: i.id, quantity: quantity)
quantity = params[:sandwich][:quantity][ing]
ing
ig
params
quantity = params[:sandwich][:quantity][ing.name]
exit
params
cont
params
exit
ing.inspect
ing.class
ing
constantize(ing)
ing
cont
params
cont
params
cont
params
cont
ing.to_o
ing.name
ing
exit
i
quantity = params[:sandwich][:quantity][i.name]
cont
sandwich.ingredients
sandwich
cont
params
cont
params
cont
params
cont
params
cont
params
cont
params
cont
params
cont
params
SandwichIngredient.all
sandwich.save
sandwich.ingredients = []
SandwichIngredient.all
Ingredient.all
sandwich.ingredients
sandwich
sand
cont
sandwich.ingredients << ings
sandwich.ingredients = ings
ings
ings = params[:sandwich][:ingredients]
params[:sandwich][:ingredients]
params
params[:ingredients]
params[:ingredients}
ings = params[:ingredients]
SandwichIngredient.all
sandwich.ingredients
sandwich.update(sandwich_params)
sandwich.ingredients
cont
sandwich.ingredients
sandwich.save
sandwich.ingredients = []
sandwich.ingredients
sandwich.update(sandwich_params)
params
cont
params
sandwich.ingredients
sandwich.update(sandwich_params)
cont
sandwich.ingredients
sandwich.update(sandwich_params)
cont
@sandwich.update(sandwich_params)
@sandwich = Sandwich.find(params[:id])
params[:id]
params
cont
@sandwich = Sandwich.find(params[:ingredient][:sandwich_id])
sandwich_ingredient = SandwichIngredient.create(sandwich_id: params[:ingredient][:sandwich_id], ingredient_id: ingredient.id, quantity: params[:ingredient][:quantity])
ingredient = Ingredient.create(ingredient_params)
exit
ingredient = Ingredient.create(ingredient_params)
exit
ingredient.errors.full_messages
ingredient = Ingredient.create(ingredient_params)
exit
 ingredient = Ingredient.create(ingredient_params)
   51:         sandwich_ingredient = SandwichIngredient.create(sandwich_id: params[:ingredient][:sandwich_id], ingredient_id: ingredient.id, quantity: params[:ingredient][:quantity])
=> 50:         ingredient = Ingredient.create(ingredient_params)
cont
        sandwich_ingredient = SandwichIngredient.create(sandwich_id: params[:ingredient][:sandwich_id], ingredient_id: ingredient.id, quantity: params[:ingredient][:quantity])
Ingredient.all
        ingredient = Ingredient.create(ingredient_params)
cont
        ingredient = Ingredient.create(ingredient_params)
ingredient.errors.full_messages
ingredient_params
params
ingredient.save
        ingredient = Ingredient.create(ingredient_params)
        sandwich_ingredient = SandwichIngredient.create(sandwich_id: params[:ingredient][:sandwich_id], ingredient_id: ingredient.id, quantity: params[:ingredient][:quantity])
        ingredient = Ingredient.create(ingredient_params)
        sandwich_ingredient = SandwichIngredient.create(sandwich_id: params[:ingredient][:sandwich_id], ingredient_id: ingredient.id, quantity: params[:ingredient][:quantity])
Ingredient.new(ingredient_params)
params
exit
